// Code generated by github.com/gebv/go-dice with details DO NOT EDIT.
// File: /Users/gebv/go/src/github.com/gebv/go-dice/examples/fsmchannelwait.go
// Porcess with args: []
// Package name: examples
// Version: v0.1-33088f0
package examples

import (
	"context"

	"github.com/gebv/ffsm"
)

// dice: START meta information
// File position: "/Users/gebv/go/src/github.com/gebv/go-dice/examples/fsmchannelwait.go:6:1"
// Annotation name: "fsmChannelwait"
// Rule config:
// {}
// dice: END meta information
// dice: START code

func StructChannelWait(ctx context.Context, ch ffsm.Channel) chan Struct {
	done := make(chan Struct, 1)
	if ctx.Err() != nil {
		close(done)
		return done
	}

	go func() {
		select {
		case <-ctx.Done():
			close(done)
			return
		case msg := <-ch:
			switch msg := msg.(type) {
			case Struct:
				done <- msg
			default:
				close(done)
			}
		}
	}()
	return done
}

// dice: END code
